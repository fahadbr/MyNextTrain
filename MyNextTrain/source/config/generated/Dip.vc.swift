// This is a generated file, do not edit!
// Generated by dipgen, see https://github.com/ilyapuchka/dipgen

import RxCocoa
import Dip
import RealmSwift
import RxRealm
import Foundation
import UIKit
import MyNextTrainCore
import RxSwift


let vcContainer = DependencyContainer { container in
    unowned let container = container
    
    container.register(factory: { 
        FavoritePairsVC.init()
    })
        .resolvingProperties { container, resolved in 
            resolved.favoritePairContainer = try container.resolve()
            resolved.favoritePairDetailsVCFactory = try container.resolve()
            resolved.addPairVCFactory = try container.resolve()
            resolved.dateService = try container.resolve()
    }
    
    container.register(factory: { 
        RootVC.init()
    })
        .resolvingProperties { container, resolved in 
            resolved.favoritePairsVc = try container.resolve()
    }
    
    container.register(.unique, factory: { favoritePairTrips in
        try FavoritePairDetailsVC.init(favoritePairTrips: favoritePairTrips, dateService: container.resolve())
    })
    
    container.register(.unique, factory: { 
        AddPairVC.init()
    })
        .resolvingProperties { container, resolved in 
            resolved.favoritePairs = try container.resolve()
            resolved.stopService = try container.resolve()
    }
    
}

class VcFactory {

    private let container: DependencyContainer

    init(container: DependencyContainer = vcContainer) {
        self.container = container
    }
    
    func favoritePairsVC() -> FavoritePairsVC {
        return try! container.resolve()
    }
    
    func rootVC() -> RootVC {
        return try! container.resolve()
    }
    
    func favoritePairDetailsVC(favoritePairTrips _favoritePairTrips: FavoritePairTrips) -> FavoritePairDetailsVC {
        return try! container.resolve(arguments: _favoritePairTrips)
    }
    
    func addPairVC() -> AddPairVC {
        return try! container.resolve()
    }
    
}
