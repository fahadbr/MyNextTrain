// This is a generated file, do not edit!
// Generated by dipgen, see https://github.com/ilyapuchka/dipgen

import RxCocoa
import Dip
import RealmSwift
import Realm
import RxRealm
import Foundation
import UIKit
import RxSwift


let baseContainer = DependencyContainer { container in
    unowned let container = container
    
    container.register(factory: { 
        AppState.init() as AppState
    })
    
    container.register(factory: { 
        RealmStopService.init() as StopService
    })
    
    container.register(factory: { 
        try DateService.init(appState: container.resolve())
    })
    
    container.register(.singleton, factory: { 
        GTFSFileLoader.instance as GTFSFileLoader
    })
    
    container.register(.singleton, factory: { 
        RealmTripService.init() as TripService
    })
    
}

class BaseFactory {

    private let container: DependencyContainer

    init(container: DependencyContainer = baseContainer) {
        self.container = container
    }
    
    func appState() -> AppState {
        return try! container.resolve()
    }
    
    func realmStopService() -> StopService {
        return try! container.resolve()
    }
    
    func dateService() -> DateService {
        return try! container.resolve()
    }
    
    func gTFSFileLoader() -> GTFSFileLoader {
        return try! container.resolve()
    }
    
    func realmTripService() -> TripService {
        return try! container.resolve()
    }
    
}
